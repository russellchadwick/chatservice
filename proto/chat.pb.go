// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	ChatMessage
	SendResponse
	SubscribeRequest
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ChatMessage struct {
	User    string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SendResponse struct {
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SubscribeRequest struct {
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*ChatMessage)(nil), "chat.ChatMessage")
	proto.RegisterType((*SendResponse)(nil), "chat.SendResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "chat.SubscribeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Chat service

type ChatClient interface {
	Send(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*SendResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Chat_SubscribeClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Send(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := grpc.Invoke(ctx, "/chat.Chat/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Chat_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/chat.Chat/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_SubscribeClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatSubscribeClient struct {
	grpc.ClientStream
}

func (x *chatSubscribeClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chat service

type ChatServer interface {
	Send(context.Context, *ChatMessage) (*SendResponse, error)
	Subscribe(*SubscribeRequest, Chat_SubscribeServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ChatServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Chat_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Subscribe(m, &chatSubscribeServer{stream})
}

type Chat_SubscribeServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type chatSubscribeServer struct {
	grpc.ServerStream
}

func (x *chatSubscribeServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Chat_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Chat_Subscribe_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xac, 0xb9, 0xb8, 0x9d, 0x81,
	0xb4, 0x6f, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0xaa, 0x90, 0x10, 0x17, 0x4b, 0x69, 0x71, 0x6a, 0x91,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x2d, 0x24, 0xc1, 0xc5, 0x9e, 0x0b, 0x91, 0x96,
	0x60, 0x02, 0x0b, 0xc3, 0xb8, 0x4a, 0x7c, 0x5c, 0x3c, 0xc1, 0xa9, 0x79, 0x29, 0x41, 0xa9, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x4a, 0x42, 0x5c, 0x02, 0xc1, 0xa5, 0x49, 0xc5, 0xc9, 0x45, 0x99,
	0x49, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x46, 0xc5, 0x5c, 0x2c, 0x20, 0x0b, 0x84,
	0xf4, 0xb9, 0x58, 0x40, 0x6a, 0x85, 0x04, 0xf5, 0xc0, 0x6e, 0x40, 0xb2, 0x54, 0x4a, 0x08, 0x22,
	0x84, 0x62, 0x14, 0x83, 0x90, 0x15, 0x17, 0x27, 0xdc, 0x30, 0x21, 0x31, 0xa8, 0x12, 0x34, 0xd3,
	0xa5, 0x30, 0x4d, 0x53, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03, 0x7b, 0xd1, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xa4, 0x25, 0xca, 0x85, 0xf0, 0x00, 0x00, 0x00,
}
